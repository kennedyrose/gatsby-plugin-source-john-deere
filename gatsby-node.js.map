{"version":3,"sources":["src/gatsby-node.js"],"names":["options","fetch","taxonomyUrl","method","headers","data","console","log","text","parseString","fetchSchema","url","prepend","append","json","mutate","removeNull","Page","Object","assign","id","parent","children","internal","type","internalType","contentDigest","crypto","createHash","update","JSON","stringify","digest","mediaType","fetchData","require","xml2js","sequence","str","Promise","resolve","reject","err","res","getProduct","arr","i","Array","isArray","sku","path","push","getUrls","length","obj","exports","sourceNodes","boundActionCreators","urls","productOnly","createNode","taxonomy","promises","map","forEach","datum","key"],"mappings":"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","file":"gatsby-node.js","sourcesContent":["const fetch = require('fetch-retry')\nconst crypto = require('crypto')\nconst xml2js = require('xml2js')\nconst sequence = require('promise-sequence')\n\nasync function fetchSchema(options) {\n\tlet data = await fetch(options.taxonomyUrl, {\n\t\tmethod: 'GET',\n\t\theaders: options.headers,\n\t})\n\tconsole.log(`Fetched Deere taxonomy...`)\n\tdata = await data.text()\n\tdata = await parseString(data)\n\treturn data\n}\n\nfunction parseString(str) {\n\treturn new Promise((resolve, reject) => {\n\t\txml2js.parseString(str, (err, res) => {\n\t\t\tif (err) return reject(err)\n\t\t\tresolve(res)\n\t\t})\n\t})\n}\n\nfunction getProduct(data, arr = []) {\n\tfor (let i in data) {\n\t\tif (typeof data[i] === 'object') {\n\t\t\tif (Array.isArray(data[i]) && data[i][0].sku && data[i][0].path) {\n\t\t\t\tif (data[i][0].sku[0] && data[i][0].path[0]) {\n\t\t\t\t\tarr.push(data[i][0].path[0])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgetProduct(data[i], arr)\n\t\t\t}\n\t\t}\n\t}\n\treturn arr\n}\n\nfunction getUrls(data, arr = []) {\n\tfor (let i in data) {\n\t\tif (i === 'path' && data[i].length) {\n\t\t\tarr.push(data[i][0])\n\t\t}\n\t\telse if (typeof data[i] === 'object') {\n\t\t\tgetUrls(data[i], arr)\n\t\t}\n\t}\n\treturn arr\n}\n\nfunction removeNull(obj) {\n\tfor (let i in obj) {\n\t\tif (obj[i] == null) {\n\t\t\tdelete obj[i]\n\t\t}\n\t\telse if (typeof obj[i] === 'object') {\n\t\t\tobj[i] = removeNull(obj[i])\n\t\t}\n\t}\n\treturn obj\n}\n\nasync function fetchData(url, options) {\n\tlet data\n\ttry {\n\t\tdata = await fetch(options.prepend + url + options.append, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: options.headers,\n\t\t})\n\t}\n\tcatch (err) {\n\t\tconsole.log(`Error fetching Deere data ${url}`)\n\t\t//console.error(err)\n\t\treturn\n\t}\n\tif (data) {\n\t\ttry {\n\t\t\tdata = await data.json()\n\t\t}\n\t\tcatch (err) {\n\t\t\tconsole.log(`Error parsing Deere JSON ${url}`)\n\t\t\t//console.error(err)\n\t\t\treturn\n\t\t}\n\t}\n\tconsole.log('Succeeded fetching Deere JSON')\n\tif (options.mutate) {\n\t\tdata = options.mutate(data)\n\t}\n\n\t// TESTING!\n\tdata = removeNull(data)\n\tdelete data.Page['table']\n\n\n\n\t//console.log(JSON.stringify(data, null, 3))\n\treturn Object.assign({\n\t\tid: url,\n\t\tparent: null,\n\t\tchildren: [],\n\t\tinternal: {\n\t\t\ttype: options.internalType,\n\t\t\tcontentDigest: crypto\n\t\t\t\t.createHash('md5')\n\t\t\t\t.update(JSON.stringify(data))\n\t\t\t\t.digest('hex'),\n\t\t\tmediaType: 'application/json',\n\t\t}\n\t}, data)\n}\n\nexports.sourceNodes = async ({ boundActionCreators }, options) => {\n\n\toptions = Object.assign({\n\t\turls: [],\n\t\tprepend: 'https://www.deere.com',\n\t\tappend: 'index.json',\n\t\theaders: {},\n\t\tinternalType: 'ApiContent',\n\t\tproductOnly: true,\n\t\ttaxonomyUrl: `https://www.deere.com/en/us-en.taxonomy`,\n\t}, options)\n\n\tconst { createNode } = boundActionCreators\n\n\tconsole.log('Fetching Deere taxonomy...')\n\tconst taxonomy = await fetchSchema(options)\n\tlet urls\n\tif (options.productOnly) {\n\t\turls = getProduct(taxonomy)\n\t}\n\telse {\n\t\turls = getUrls(taxonomy)\n\t}\n\tconsole.log(`Found ${urls.length} Deere URLs...`)\n\t//urls.length = 203\n\n\t/*\n\turls = [\n\t\turls[201],\n\t\turls[202],\n\t]\n\t*/\n\n\tconst promises = urls.map(url => {\n\t\treturn fetchData(url, options)\n\t})\n\tconsole.log(`Fetching ${urls.length} Deere URLs...`)\n\tlet data = await sequence(promises)\n\n\tconsole.log(`Creating Deere nodes...`)\n\tdata.forEach((datum, key) => {\n\t\tif (typeof datum === 'object') {\n\t\t\tcreateNode(datum)\n\t\t}\n\t})\n\n\tconsole.log(`Created Deere nodes.`)\n\n\treturn\n}\n"]}